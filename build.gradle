buildscript {

    ext {
        cfAppVersion = "2.1.0"
        jacocoVersion = "0.8.2"
    }

    repositories {
        apply from: "nexus-repo.gradle"

        nexusCenter()
        jcenter()
        mavenCentral()

        maven { url 'http://nexus.wdf.sap.corp:8081/nexus/content/repositories/build.snapshots' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }

    }

    dependencies {
        classpath "io.github.robwin:jgitflow-gradle-plugin:0.5.0"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.7.5"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
        classpath "org.whitesource:whitesource-gradle-plugin:18.8.1"
        //classpath "io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE"
        classpath "com.github.pivotalservices:ya-cf-app-gradle-plugin:${cfAppVersion}"
        classpath('com.sap.research.security.vulas:plugin-gradle:3.0.9') { changing = true }
        classpath "org.ajoberstar.grgit:grgit-gradle:3.0.0"
    }
}

apply from: "nexus-repo.gradle"
apply plugin: "com.jfrog.artifactory"
apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "io.github.robwin.jgitflow"
apply plugin: "jacoco"
apply plugin: "application"
apply plugin: "org.sonarqube"
apply plugin: "whitesource"
//apply plugin: "io.spring.dependency-management"
apply plugin: "maven-publish"
apply plugin: 'org.ajoberstar.grgit'

application {
    mainClassName = 'com.hybris.caas'
}

//dependencyManagement {
//    imports {
//        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE"
//    }
//}

allprojects {
    apply plugin: "vulas"
}

if (project.hasProperty('vulasToken') && project.hasProperty('ppmsNumber')) {
    project.ext.set("vulas.core.space.token", project.property('vulasToken'))
    project.ext.set("vulas.report.sap.scv", project.property('ppmsNumber'))
    project.ext.set("vulas.shared.backend.serviceUrl", project.property('serviceUrl'))
}

if (project.hasProperty("cfProfile")) {
    apply plugin: "cf-app"
    apply from: "cf-${cfProfile}.gradle"
}

repositories {
    nexusCenter()
    jcenter()
    mavenLocal()

    maven { url "https://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
}

ext {
    beanutilsVersion = "1.9.4"
    lomboVersion = "1.18.2"
    //see : update caasStarter and logging
    caasStarter = "3.37.0"
    jaxbVersion = "2.3.1"
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.profile", "SonarCI_1_0_0"
        property "sonar.projectVersion", "${version}"
        property "sonar.exclusions", "src/main/resources/static/api-console/**"
    }
}


whitesource {
    orgToken System.env.WHITESOURCE_ORG_TOKEN
    userToken System.env.WHITESOURCE_USER_TOKEN
    productName "SHC - COMMERCE AS A SERVICE 2.0"
    checkPolicies = true
    failOnError = true
}

sourceSets {
    integrationTest {
//        groovy {
//            srcDir file("src/test/groovy")
//            srcDir file("src/test/java")
//        }
    }
}
dependencies {
    //refer to com/hybris/caas/order/utils/GeneralUtils.java:28
    compile("commons-beanutils:commons-beanutils:${beanutilsVersion}") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    compile("org.projectlombok:lombok:${lomboVersion}")
    annotationProcessor(
            "org.projectlombok:lombok:${lomboVersion}"
    )

    compile("javax.xml.bind:jaxb-api:${jaxbVersion}")
    compile("com.sap.caas:caas-spring-boot-starter-web:${caasStarter}")
    compile("com.sap.caas:caas-spring-boot-starter-error-handling:${caasStarter}")
    compile("com.sap.caas:caas-spring-boot-starter-logging:${caasStarter}") {
        exclude group: 'com.sap.cloud.security.xsuaa', module: 'java-container-security-api'
    }

    testAnnotationProcessor("org.projectlombok:lombok:${lomboVersion}")
    testCompileOnly("org.projectlombok:lombok:${lomboVersion}")
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'junit', name: 'junit', version: '4.13'

    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

idea {
    module {
        sourceDirs += file("$rootDir/src/main/generated")
    }
}

compileJava {
    options.compilerArgs << "-parameters"
}

test {
    systemProperties System.properties

    jacoco {
        destinationFile = file("$buildDir/jacoco/unitTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacoco {
    toolVersion = jacocoVersion
}


task unitTest(type: Test) {
    systemProperty 'spring.profiles.active', 'ci'

    exclude "**/*IntegrationTest*"
    exclude "**/*IntegrationSpec*"
    exclude "**/integration3/spec/*"
}

task integrationTest(type: Test) {
    systemProperty 'spring.profiles.active', 'ci'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    include "**/*IntegrationSpec*"
    include "**/*EventSpec*"
}
check.dependsOn integrationTest

task importProducts(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = "com.hybris.caas.product.importer.ProductsImporterRunner"

    args System.getProperty("env") == null ? "dev" : System.getProperty("env"),
            System.getProperty("tenant") == null ? "sap" : System.getProperty("tenant")
}

task copyCompiles(type: Copy) {
    from configurations.compile
    into "dependencies"
}

task copyCompileOnlys(type: Copy) {
    from configurations.compileOnly
    into "dependencies"
}
task copyTestCompiles(type: Copy) {
    from configurations.testCompile
    into "dependencies"
}

apply plugin: 'java'
apply plugin: 'maven'

group = 'com.sap.upscale'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = project.version.endsWith('SNAPSHOT') ? snapshots_repo : releases_repo
            credentials {
                username = artifactory_username
                password = artifactory_password
            }
        }
    }
}
